#!/usr/bin/env python
import sys, os             # for adding to path
import time
from mpi4py import MPI

import balsam.launcher.dag as dag

def poll_until_state(job, state, timeout_sec=60.0, delay=2.0):
  start = time.time()
  while time.time() - start < timeout_sec:
    time.sleep(delay)
    job.refresh_from_db()
    if job.state == state:
      return True
  raise RuntimeError("Job %s failed to reach state %s in %.1f seconds" % (job.cute_id,state,timeout_sec))

#Temp answer for when __file__ does not work.
def get_out_dir_from_app():
    

myrank=MPI.COMM_WORLD.Get_rank()
steps=1
sleep_time = 3 #+ myrank

#Create output dir
cwd=os.getcwd()
print("cwd is", cwd)

dir_path = os.path.dirname(os.path.realpath(__file__))
script_name = os.path.splitext(os.path.basename(__file__))[0]
sim_dir = 'simdir_' + script_name.split("test_", 1).pop()
dir_path = os.path.dirname(os.path.realpath(__file__))
sim_path = os.path.join(dir_path,sim_dir)

if myrank == 0:
  if not os.path.isdir(sim_path):
    try:
      os.mkdir(sim_path)
    except:
      raise("Cannot make simulation directory %s" % sim_path)


print ("dir_path is %s" % dir_path)
print ("Host job rank is %d Output dir is %s" % (myrank,sim_dir))
print ("sim_path is %s" % sim_path)

start = time.time()
for sim_id in range(steps):
  jobname = 'outfile_' + 'for_sim_id_' + str(sim_id)  + '_ranks_' + str(myrank) + '.txt'
  
  stage_out_url_line='local:'+sim_path
  stage_out_files_line=jobname + '.out'
  print ("stage_out_url_line is %s" % stage_out_url_line)
  print ("stage_out_files_line is %s" % stage_out_files_line)  
  
  current_job = dag.add_job(name = jobname,
                            workflow = "libe_workflow",
                            application="helloworld",
                            application_args=str(sleep_time),                            
                            num_nodes=1,
                            ranks_per_node=8,
                            stage_out_url_line=stage_out_line,
                            stage_out_files=stage_out_files_line)

  success = poll_until_state(current_job, 'JOB_FINISHED') #OR job killed
  if success:
    print ("Completed job: %s rank=%d  time=%f" % (jobname,myrank,time.time()-start))
  else:
    print ("Job not completed: %s rank=%d  time=%f Status" % (jobname,myrank,time.time()-start),current_job.state)

end = time.time()
print ("Done: rank=%d  time=%f" % (myrank,end-start))


